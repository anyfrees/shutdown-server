name: Build & Release Electron App

on:
  release:
    types: [created]

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out git repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev
          npm ci

      - name: Install dependencies on macOS and Windows
        if: runner.os != 'Linux'
        run: npm ci

      - name: Build distributable
        run: npm run make
      
      # 新增：调试步骤，列出打包后的产物，方便排查问题
      - name: List build artifacts
        if: always() # 即使上一步失败也运行，以便我们看到部分产物
        run: ls -R ./out

      # 优化：智能查找不同平台生成的安装包路径和名称
      - name: Get Artifact Info
        id: get_artifact_info
        shell: bash
        run: |
          ARTIFACT_PATH=""
          ARTIFACT_NAME=""
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ARTIFACT_PATH=$(find ./out/make -name "*.exe" | head -n 1)
            ARTIFACT_NAME="${{ github.event.repository.name }}-${{ github.ref_name }}-windows-setup.exe"
          fi
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            ARTIFACT_PATH=$(find ./out/make -name "*.zip" | head -n 1)
            ARTIFACT_NAME="${{ github.event.repository.name }}-${{ github.ref_name }}-macos.zip"
          fi
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            ARTIFACT_PATH=$(find ./out/make -name "*.deb" | head -n 1)
            ARTIFACT_NAME="${{ github.event.repository.name }}-${{ github.ref_name }}-linux.deb"
          fi
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_OUTPUT
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      # 优化：使用上一步找到的精确路径和名称来上传
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          asset_path: ${{ steps.get_artifact_info.outputs.ARTIFACT_PATH }}
          asset_name: ${{ steps.get_artifact_info.outputs.ARTIFACT_NAME }}
          asset_content_type: application/octet-stream
          upload_url: ${{ github.event.release.upload_url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}